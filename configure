#!/bin/sh

set -e

os_cfg(){
	cat > config.mk <<!
UCC_AS      = ${UCC_AS}
UCC_LD      = ${UCC_LD}
UCC_ARCH    = ${UCC_ARCH}
UCC_LDFLAGS = ${UCC_LDFLAGS}
UCC_CPU     = ${UCC_CPU}
!

	cat > src/ucc/cfg.h <<!
#define UCC_AS      "${UCC_AS}"
#define UCC_LD      "${UCC_LD}"
#define UCC_ARCH    "${UCC_ARCH}"
#define UCC_LDFLAGS "${UCC_LDFLAGS}"
!

	if [ $1 = Darwin ]
	then
		SECTION_TEXT="__TEXT,__text"
		SECTION_DATA="__DATA,__data"
		SECTION_BSS="__BSS,__bss"
	else
		SECTION_TEXT=".text"
		SECTION_DATA=".data"
		SECTION_BSS=".bss"
	fi

	cat > src/as_cfg.h <<!
#define SECTION_TEXT $SECTION_TEXT
#define SECTION_DATA $SECTION_DATA
#define SECTION_BSS  $SECTION_BSS
#define UCC_M32      ${UCC_M32}
!

	if ! which perl > /dev/null
	then
		if [ $1 = Darwin ]
		then m=" (and darwin syscalls)"
		fi
		echo >&2 "Perl not found, generate strerror$m yourself"
	else
		perl -e '
		for(1 .. 100){
			$! = $_;
			printf "\t\"%s\",\n", $!;
		}
		' > lib/string_strerrs.h

		if [ $1 = Darwin ]
		then perl lib/syscalls_darwin.pl < lib/syscalls_darwin_unix.h > lib/syscalls_darwin.h
		fi
	fi

	echo "Configured for $UCC_CPU $1"
}


usage(){
	cat >&2 <<!
Usage: $0 [--as=path/to/as] [--cpu=...] [clean]
!
	exit 1
}


UCC_AS=as
UCC_LD=ld

UCC_ARCH=elf64
UCC_LDFLAGS=''
UCC_CPU=x86_64
UCC_M32=0

unam="$(uname -s)"

# defaults for an OS
case "$unam" in
	Darwin)
		UCC_ARCH=macho64
		UCC_LDFLAGS='-macosx_version_min 10.5'
		;;

	CYGWIN_NT-*)
		UCC_ARCH=win32
		UCC_M32=1
		;;
esac

clean=0

get_arg='echo "$arg" | cut -d= -f2'

i=1
while [ $i -le $# ]
do
	arg=`eval echo '$'"$i"`
	case "$arg" in
		--as=*)
			UCC_AS="`eval $get_arg`"
			;;
		--cpu=*)
			UCC_CPU="`eval $get_arg`"
			ARCH_DIR=lib/arch
			if ! [ -d $ARCH_DIR/"$UCC_CPU" ]
			then
				echo >&2 "$UCC_CPU invalid, choices are:"
				(cd $ARCH_DIR; ls -d *)
				usage
			fi
			if echo "$UCC_CPU" | grep 64 > /dev/null
			then UCC_M32=0
			else UCC_M32=1
			fi
			;;
		clean)
			clean=1
			;;
		*)
			usage
	esac
	i=`expr $i + 1`
done

if [ $clean -ne 0 ]
then
	rm -f config.mk lib/string_strerrs.h lib/syscalls_darwin.h
	exit
fi

case "$unam" in
	Darwin)
		os_cfg Darwin
		;;

	Linux)
		os_cfg Linux
		;;

	FreeBSD)
		os_cfg FreeBSD
		;;

	CYGWIN_NT-*)
		os_cfg Cygwin
		;;

	*)
		echo "unknown OS ($unam)" >&2
		exit 1
		;;
esac
