#!/bin/sh

set -e

os_cfg(){
	cat > config.mk <<!
UCC_AS      = ${UCC_AS}
UCC_LD      = ${UCC_LD}
UCC_ARCH    = ${UCC_ARCH}
UCC_LDFLAGS = ${UCC_LDFLAGS}
UCC_CPU     = ${UCC_CPU}
!

	cat > src/ucc/cfg.h <<!
#define UCC_AS      "${UCC_AS}"
#define UCC_LD      "${UCC_LD}"
#define UCC_ARCH    "${UCC_ARCH}"
#define UCC_INC     "${UCC_INC}"

#define NEED_DSYM $NEED_DSYM

#define UCC_CPPFLAGS "${UCC_CPPFLAGS}"
#define UCC_CFLAGS   "${UCC_CFLAGS}"
#define UCC_LDFLAGS  "${UCC_LDFLAGS}"

#define UCC_STDLIB "${UCC_STDLIB}"
#define UCC_CRT    "${UCC_CRT}"
!

	if [ $1 = Darwin ]
	then
		SECTION_TEXT="__TEXT,__text"
		SECTION_DATA="__DATA,__data"
		SECTION_BSS="__BSS,__bss"
		SECTION_RODATA="__TEXT,__const"
		SECTION_DBG_ABBREV="__DWARF,__debug_abbrev,regular,debug"
		SECTION_DBG_INFO="__DWARF,__debug_info,regular,debug"
		SECTION_DBG_LINE="__DWARF,__debug_line,regular,debug"
		DWARF_INDIRECT_SECTION_LINKS=1

		ASM_WEAK_DIRECTIVE='weak_reference'
		# Darwin also needs "-flat_namespace -undefined suppress"
	else
		SECTION_TEXT=".text"
		SECTION_DATA=".data"
		SECTION_BSS=".bss"
		SECTION_RODATA=".rodata"
		SECTION_DBG_ABBREV=".debug_abbrev"
		SECTION_DBG_INFO=".debug_info"
		SECTION_DBG_LINE=".debug_line"
		DWARF_INDIRECT_SECTION_LINKS=0
		ASM_WEAK_DIRECTIVE='weak'
	fi

	cat > src/as_cfg.h <<!
#define SECTION_NAME_TEXT $SECTION_TEXT
#define SECTION_NAME_DATA $SECTION_DATA
#define SECTION_NAME_BSS  $SECTION_BSS
#define SECTION_NAME_RODATA $SECTION_RODATA
#define SECTION_NAME_DBG_ABBREV $SECTION_DBG_ABBREV
#define SECTION_NAME_DBG_INFO $SECTION_DBG_INFO
#define SECTION_NAME_DBG_LINE $SECTION_DBG_LINE
#define UCC_M32      ${UCC_M32}
#define DWARF_INDIRECT_SECTION_LINKS $DWARF_INDIRECT_SECTION_LINKS
#define ASM_PLBL_PRE "$ASM_PLBL"
#define ASM_WEAK_DIRECTIVE "$ASM_WEAK_DIRECTIVE"
!

	if ! which perl > /dev/null
	then
		if [ $1 = Darwin ]
		then m=" (and darwin syscalls)"
		fi
		echo >&2 "Perl not found, generate strerror$m yourself"
	else
		perl -e '
		for(1 .. 100){
			$! = $_;
			printf "\t\"%s\",\n", $!;
		}
		' > lib/string_strerrs.h

		if [ $1 = Darwin ]
		then perl lib/syscalls_darwin.pl < lib/syscalls_darwin_unix.h > lib/syscalls_darwin.h
		fi
	fi

	if [ $1 = Cygwin ]
	then echo "CFLAGS += -Wno-char-subscripts"
	fi > src/src_config_platform.mk

	echo "Configured for $UCC_CPU $1"
}

usage(){
	cat >&2 <<!
Usage: $0 [--as=path/to/as] [--cpu=...] [--with-ucc-lib] [clean]
!
	exit 1
}

leading_underscore(){
	UCC_CPPFLAGS="-D__LEADING_UNDERSCORE $UCC_CPPFLAGS"
	UCC_CFLAGS="-fleading-underscore $UCC_CFLAGS"
}

try_set(){
	var="$1"
	shift
	for ent in $@
	do
		if test -f "$ent"
		then eval "$var=\"\$$var:$ent\""
		fi
	done
}

UCC_AS=as
UCC_LD=ld

UCC_ARCH=elf64
UCC_LDFLAGS=''
UCC_CFLAGS=''
UCC_CPU=x86_64
UCC_M32=0
ASM_PLBL=.L
NEED_DSYM=0

unam="$(uname -s)"

# setup include paths
# TODO: option to use local ./lib path
UCC_INC="-I/usr/include"

# defaults for an OS
case "$unam" in
	Linux)
		# assume gcc
		unam_lc="$(echo "$unam" | tr A-Z a-z)"

		UCC_DYN="-dynamic-linker /lib64/ld-linux-x86-64.so.2"
		UCC_STDLIB="-lc"

		machine_path="$UCC_CPU-$unam_lc-gnu"

		try_set UCC_CRT /usr/lib/"${machine_path}"/crt1.o
		try_set UCC_CRT /usr/lib/"${machine_path}"/crti.o
		try_set UCC_CRT /usr/lib/"${machine_path}"/crtn.o

		gcc_inc=$(echo /usr/lib/gcc/$machine_path/*/ | tr ' ' '\n' | sort | tail -1)
		echo "Borrowing gcc-$(basename "$gcc_inc")'s include/"

		try_set UCC_INC "/usr/include/$machine_path"
		try_set UCC_INC "$gcc_inc/include"
		;;


	FreeBSD)
		UCC_CRT="/usr/lib/crt1.o:/usr/lib/crti.o:/usr/lib/crtbegin.o:/usr/lib/crtend.o:/usr/lib/crtn.o"
		UCC_STDLIB="-lc"
		;;

	Darwin)
		UCC_ARCH=macho64
		UCC_CFLAGS='-mpreferred-stack-boundary=4' # 2^4 = 16 byte aligned
		UCC_STDLIB='-lSystem'
		UCC_CRT='-lcrt1.o'
		UCC_LDFLAGS='-macosx_version_min 10.5'
		ASM_PLBL=L
		NEED_DSYM=1
		leading_underscore
		;;

	CYGWIN_NT-*)
		UCC_ARCH=win32
		UCC_M32=1
		leading_underscore
		;;
esac

clean=0

get_arg='echo "$arg" | cut -d= -f2'

i=1
while [ $i -le $# ]
do
	arg=`eval echo '$'"$i"`
	case "$arg" in
		--as=*)
			UCC_AS="`eval $get_arg`"
			;;
		--cpu=*)
			UCC_CPU="`eval $get_arg`"
			ARCH_DIR=lib/arch
			if ! [ -d $ARCH_DIR/"$UCC_CPU" ]
			then
				echo >&2 "$UCC_CPU invalid, choices are:"
				(cd $ARCH_DIR; ls -d *)
				usage
			fi
			if echo "$UCC_CPU" | grep 64 > /dev/null
			then UCC_M32=0
			else UCC_M32=1
			fi
			;;
		--with-ucc-lib)
			UCC_INC="-Ilib/"
			UCC_CRT="lib/crt.a"
			UCC_STDLIB="lib/libc.a"
			UCC_DYN=''
			;;
		clean)
			clean=1
			;;
		*)
			usage
	esac
	i=`expr $i + 1`
done

if [ $clean -ne 0 ]
then
	rm -f config.mk lib/string_strerrs.h lib/syscalls_darwin.h
	exit
fi

UCC_LDFLAGS="$UCC_LDFLAGS $UCC_DYN"

case "$unam" in
	Darwin)
		os_cfg Darwin
		;;

	Linux)
		os_cfg Linux
		;;

	FreeBSD)
		os_cfg FreeBSD
		;;

	CYGWIN_NT-*)
		os_cfg Cygwin
		;;

	*)
		echo "unknown OS ($unam)" >&2
		exit 1
		;;
esac
